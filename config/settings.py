"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import json
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-)w#0mg=6_phw$@s*-dw=dumtu&tk4$nit$0clpvt6snq18)-s$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "user",
    "info",
    "product",
    "community",
    "game",
    "taggit.apps.TaggitAppConfig",
    "taggit_templatetags2",
    # allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # enabled providers
    "allauth.socialaccount.providers.kakao",
    "allauth.socialaccount.providers.google",
    # # crispy forms
    "crispy_forms",
    "crispy_bootstrap5",
]
TAGGIT_CASE_INSENSITIVE = True
TAGGIT_LIMIT = 50

# allauth 설정
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

ACCOUNT_SIGNUP_REDIRECT_URL = "home"  # 회원가입 후 리디렉션
LOGIN_REDIRECT_URL = "home"  # 로그인 후 리디렉션
ACCOUNT_LOGOUT_REDIRECT_URL = "home"  # 로그아웃시 리디렉션 reverse_lazy('user:home')
ACCOUNT_LOGOUT_ON_GET = True  # 로그아웃 버튼 클릭 시 바로 로그아웃

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"  # 이메일 검사. 임시로 none -> “mandatory” req
ACCOUNT_AUTHENTICATION_METHOD = "email"  # 이메일로 로그인

ACCOUNT_SESSION_REMEMBER = True  # 로그인(세션) 유지
SESSION_COOKIE_AGE = 86400  # 쿠키 하루동안 저장 -> 세션 정보 제거 python manage.py clearsessions 자동화 req

# ACCOUNT_SIGNUP_FORM_CLASS = 'user.forms.SignupForm'
ACCOUNT_USERNAME_VALIDATORS = "user.validators.custom_username_validators"
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

ACCOUNT_FORMS = {"signup": "user.forms.MyCustomSignupForm"}

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

with open(os.path.join(BASE_DIR, "config/social.json")) as f:
    social = json.loads(f.read())

SOCIALACCOUNT_PROVIDERS = {
    "kakao": {
        "APP": {
            "client_id": social["KAKAO"]["CLIENT_ID"],
            "redirect_uri": "/redirect/",
            "response_type": "",
        }
    },
    "google": {
        "APP": {
            "client_id": social["GOOGLE"]["CLIENT_ID"],
            "secret": social["GOOGLE"]["SECRET"],
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
    {
        "NAME": "user.validators.CustomPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "ko"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "user.User"

# Static files, Media files 재설정
USE_S3 = False

if USE_S3:
    # # AWS 설정
    # AWS_ACCESS_KEY_ID = secrets['AWS']['ACCESS_KEY_ID']
    # AWS_SECRET_ACCESS_KEY = secrets['AWS']['SECRET_ACCESS_KEY']
    # AWS_STORAGE_BUCKET_NAME = secrets['AWS']['STORAGE_BUCKET_NAME']
    # AWS_DEFAULT_ACL = 'public-read'
    # AWS_S3_REGION_NAME = 'ap-northeast-2'
    # AWS_S3_SIGNATURE_VERSION = 's3v4'
    #
    # # STATIC 설정
    # STATIC_LOCATION = 'static'
    # AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    # # STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
    # STATICFILES_STORAGE = 'config.storages.StaticStorage'  # Static File
    #
    # # MEDIA 설정 - 유저 업로드 static files 기본 경로
    # MEDIA_LOCATION = 'media'
    # # MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
    # MEDIA_URL = '/media/'
    # DEFAULT_FILE_STORAGE = 'config.storages.MediaStorage'  # Media File
    #
    # STATICFILES_DIRS = os.path.join(BASE_DIR, 'static')   # !!
    pass
else:
    if DEBUG:
        STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
        STATIC_ROOT = ""
    else:
        STATIC_ROOT = "static/"

    MEDIA_URL = "media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# # console setup
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', ],
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
#         },
#         'django.db.backends': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#             'propagate': False,
#         }
#     }
# }
